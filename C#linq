using System.Collections.Generic;
using System;
using System.Xml.Linq;
using System.Linq;
using MySqlX.XDevAPI.Common;
using Mysqlx.Session;
class Program { 

    static void Main(string[] args)
    {
        List<Course> courseList = new List<Course>()
  {
    new Course() { CourseId = "A001", Name = "C#", Teacher = "Bill", Classroom = "L107", Credit = 3 },
    new Course() { CourseId = "A002", Name = "HTML/CSS", Teacher = "Amos", Classroom = "L104", Credit = 2 },
    new Course() { CourseId = "A003", Name = "JavaScript/jQuery", Teacher = "奚江華", Classroom = "L104", Credit = 3 },
    new Course() { CourseId = "A004", Name = "MSSQL", Teacher = "Jimmy", Classroom = "L202", Credit = 3 },
    new Course() { CourseId = "A005", Name = "MVC5/CoreMVC", Teacher = "奚江華", Classroom = "L107", Credit = 6 },
    new Course() { CourseId = "B001", Name = "VueJS", Teacher = "Jimmy", Classroom = "L104", Credit = 2 },
    new Course() { CourseId = "B002", Name = "DevOps", Teacher = "David", Classroom = "L107", Credit = 3 },
    new Course() { CourseId = "B003", Name = "MongoDB", Teacher = "Ben", Classroom = "L202", Credit = 2 },
    new Course() { CourseId = "B004", Name = "Redis", Teacher = "Ben", Classroom = "L202", Credit = 2 },
    new Course() { CourseId = "B005", Name = "Git", Teacher = "Andy", Classroom = "L107", Credit = 1 },
    new Course() { CourseId = "B006", Name = "Git", Teacher = "Jimmy", Classroom = "L107", Credit = 1 }
  };

        List<Student> studentList = new List<Student>()
  {
    new Student() { StudentId = "S0001", Name = "小新", Gender = GenderOption.Male, CourseList = new List<string>() { "A001", "A004", "B002", "B003", "B004", "B005" } },
    new Student() { StudentId = "S0002", Name = "妮妮", Gender = GenderOption.Female, CourseList = new List<string>() { "A002", "A003", "B001", "B002", "B005" } },
    new Student() { StudentId = "S0003", Name = "風間", Gender = GenderOption.Male, CourseList = new List<string>() { "A001", "A002", "A003", "A004", "A005", "B001", "B002", "B003", "B004", "B005"  } },
    new Student() { StudentId = "S0004", Name = "阿呆", Gender = GenderOption.Male, CourseList = new List<string>() { "A001", "A002", "A003", "A004", "A005" } },
    new Student() { StudentId = "S0005", Name = "正男", Gender = GenderOption.Male, CourseList = new List<string>() { "B001", "B002", "B003", "B004", "B005" } },
    new Student() { StudentId = "S0006", Name = "小丸子", Gender = GenderOption.Female, CourseList = new List<string>() { "A005" } },
    new Student() { StudentId = "S0007", Name = "小玉", Gender = GenderOption.Female, CourseList = new List<string>() { "A005", "B002", "B003", "B004" } },
  };

        #region 第1題
        // 1. 列出所有課程的名稱
        Console.WriteLine("1. 列出所有課程的名稱");
        {
            var allcouresename = courseList.Select(x => x.Name).Distinct();

            foreach (var item in allcouresename)
            {
                Console.WriteLine(item);
            }
            Console.ReadLine();

        }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第2題
        // 2. 列出所有在"L107"教室上課的課程ID
        Console.WriteLine("2. 列出所有在'L107'教室上課的課程ID");
        {
            var allcourseid107 = courseList.Where((x) => x.Classroom.Contains("L107"))
                .Select((x) => x.CourseId);


            foreach (var item in allcourseid107)
            {
                Console.WriteLine(item);
            }
        }
        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第3題
        // 3. 列出所有在'L107'教室上課，並且學分為3的課程ID
        Console.WriteLine("3. 列出所有在'L107'教室上課，並且學分為3的課程ID");
        {
            var all107credit3 = courseList.Where((x) => x.Classroom == "L107" && x.Credit == 3)
                .Select((x) => x.CourseId);

            foreach (var item in all107credit3)
            {
                Console.WriteLine(item);
            }

        }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第4題
        // 4. 列出所有老師的名字(名字不能重複出現)
        Console.WriteLine("4. 列出所有老師的名字(名字不能重複出現)");
        {
            var alltechersname = courseList.Select((x) => x.Teacher).Distinct();

            foreach (var item in alltechersname)
            {
                Console.WriteLine(item);
            }

        }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第5題
        // 5. 列出所有有在'L202'上課的老師名字(名字不能重複出現)
        Console.WriteLine("5. 列出所有有在'L202'上課的老師名字(名字不能重複出現)");
        {
            var all202teacher = courseList.Where((x) => x.Classroom == "L202")
                .Select((x) => x.Teacher).Distinct();
            foreach (var item in all202teacher)
            {
                Console.WriteLine(item);
            }

        }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第6題
        // 6. 列出所有女性學生的名字
        Console.WriteLine("6. 列出所有女性學生的名字");
        {
            var allfemalestd = studentList.Where((x) => x.Gender == GenderOption.Female)
                .Select((x) => x.Name);

            foreach (var item in allfemalestd)
            { Console.WriteLine(item); }

        }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第7題
        // 7. 列出有上'Git'這門課的學員名字
        Console.WriteLine("7. 列出有上'Git'這門課的學員名字");
        {
            var res = studentList.Where(x => x.CourseList.Any(x1 => x1.Contains(courseList.First(x2 => x2.Name.Contains("Git")).CourseId) || x1.Contains(
            courseList.Last(x2 => x2.Name.Contains("Git")).CourseId))).Select(x => x.Name);
            Console.WriteLine(string.Join(" ", res));

            var res1 = studentList.Select(x => x.CourseList);
            var res2 = res1.Where(x => x.Contains("B005") || x.Contains("B006"));
            Console.WriteLine(res2);
            //var res3 = res2.Select(x => x.);
            foreach (var i in res2)
            {
                //Console.WriteLine();
            }

            //var git  = from s in studentList
            //             from s1 in s.CourseList
            //              join c in courseList
            //              on s1 equals c.CourseId
            //              where c.Name == "Git"
            //              select s.Name
            //              new Q7gitstdN
            //              { Gitstd = c.Name, stdName :s.Name,};

                    }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        //#region 第8題
        //// 8. 列出每個學員上的每一堂課
        //// ex:
        ///*
        //           小玉: 
        //                MVC5/CoreMVC
        //                DevOps
        //                MongoDB
        //                Redis
        //        */
        Console.WriteLine("8. 列出每個學員上的每一堂課");
        {
            //var studentC = studentList.Select(courseList);

            var stdclass = from s in studentList
                           from s1 in s.CourseList
                           join c in courseList
                           on s1 equals c.CourseId
                           select
                           new Q8stdclass
                           { ClassName = c.CourseId, Student = s.Name, Course = c.Name, };

            foreach (var item in stdclass)
            {
                Console.WriteLine($"{item.Student}修的課:{item.Course}");

            }
            //join 不能字串跟List必較
        }

        Console.WriteLine($"{Environment.NewLine}");


        #region 第9題
        // 9. 找出誰上的課數量最少
        Console.WriteLine("9. 找出誰上的課數量最少");
        {
            //作答區


            var res = studentList.Select(x => new
            {
                name = x.Name,
                count = x.CourseList.Count
            }).OrderBy(x => x.count).First();
            Console.WriteLine(res);
            //foreach( var i in res)
            //{
            //    Console.WriteLine(i.name);
            //    Console.WriteLine(i.count);
            //}
            //Console.WriteLine(num);
            //Console.WriteLine(string.Join(Environment.NewLine, num));
            //foreach (var i in num) {
            //    Console.WriteLine(i);
            //}



        }

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第10題
        // 10. 找出誰修的學分總和小於10
        Console.WriteLine("10. 找出誰修的學分總和小於10");
        {

            var res = studentList
                .Select(x => new
                {
                    name = x.Name,
                    credit = x.CourseList
                .Sum(id => courseList
                .First(c => c.CourseId == id).Credit)
                })
                .Where(c => c.credit < 10).First();

           
                Console.WriteLine($"修的學分總和小於10:{res}");        

        } 
        

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第11題
        // 11. 找出誰最後獲得學分數最高
        Console.WriteLine("11. 找出誰最後獲得學分數最高");
        {
            //courseList.Sum(x=> x.CourseiD == id).cride
            var scores = studentList.Select(x => x.CourseList.Sum(id => courseList.First(x2 => id == x2.CourseId).Credit
            ));
            foreach (var item in scores)
            {

                Console.WriteLine($"學分數最高:{item}");

            }


        }
       

        Console.WriteLine($"{Environment.NewLine}");
        #endregion

        #region 第12題(加分題)
        // 12. 十二生肖自定義排序
        Console.WriteLine("12. 十二生肖自定義排序");
        {
            var zoo = new List<string> { "龍", "鼠", "馬", "豬", "羊" }; //答案: 鼠、龍、馬、羊、豬
            Console.WriteLine($"排序前: {string.Join("、", zoo)}{Environment.NewLine}");
            Console.Write("排序後: ");
            //作答區
            var zoo2= new List<string> { "鼠", "龍", "馬", "羊", "豬" };
            var  y =zoo.OrderBy(x => zoo2.IndexOf(x));
             foreach (var item in y)
            {
                Console.WriteLine(item);

            }
            

        }

        #endregion

        Console.ReadLine();
    }
}

internal class Q8stdclass
{
    public string ClassName { get; set; }
    public string Student { get; set; }
    public string Course { get; set; }
}

public class Student
{
    /// <summary>
    /// 學生姓名
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// 性別
    /// </summary>
    public GenderOption Gender { get; set; }

    /// <summary>
    /// 學號
    /// </summary>
    public string StudentId { get; set; }

    /// <summary>
    /// 選課
    /// </summary>
    public List<string> CourseList { get; set; }
}

public enum GenderOption
{
    Male,
    Female
}
public class Course
{
    /// <summary>
    /// 課程ID
    /// </summary>
    public string CourseId { get; set; }

    /// <summary>
    /// 課程名稱
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// 指導教師
    /// </summary>
    public string Teacher { get; set; }

    /// <summary>
    /// 課程教室
    /// </summary>
    public string Classroom { get; set; }

    /// <summary>
    /// 學分
    /// </summary>
    public int Credit { get; set; }
}
